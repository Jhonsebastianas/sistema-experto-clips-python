import tkinter as tk
from tkinter import ttk, messagebox
from sistema_experto import SistemaExperto
from fuzzy_system import SistemaDifusoFinanciero

class SistemaFinancieroGUI:
    """Interfaz gr√°fica principal que integra el sistema experto CLIPS y el sistema difuso"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("üí∞ Sistema Financiero Inteligente - CLIPS + L√≥gica Difusa")
        self.root.geometry("900x700")
        
        # Crear instancias de ambos sistemas
        self.sistema_experto = SistemaExperto()
        self.sistema_difuso = SistemaDifusoFinanciero()
        
        # Configurar interfaz con pesta√±as
        self._crear_interfaz()
    
    def _crear_interfaz(self):
        """Crea la interfaz gr√°fica con pesta√±as"""
        # Crear notebook (pesta√±as)
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Pesta√±a 1: Sistema Experto CLIPS
        self.tab_experto = ttk.Frame(self.notebook)
        self.notebook.add(self.tab_experto, text="üß† Sistema Experto CLIPS")
        self._crear_tab_experto()
        
        # Pesta√±a 2: Sistema Difuso
        self.tab_difuso = ttk.Frame(self.notebook)
        self.notebook.add(self.tab_difuso, text="üåä Sistema Difuso")
        self._crear_tab_difuso()
        
        # Pesta√±a 3: Informaci√≥n del Sistema
        self.tab_info = ttk.Frame(self.notebook)
        self.notebook.add(self.tab_info, text="‚ÑπÔ∏è Informaci√≥n")
        self._crear_tab_info()
    
    def _crear_tab_experto(self):
        """Crea la pesta√±a del sistema experto CLIPS"""
        # Frame principal con scroll
        main_frame = ttk.Frame(self.tab_experto)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # T√≠tulo
        titulo = ttk.Label(main_frame, text="üß† SISTEMA EXPERTO EN FINANZAS PERSONALES", 
                          font=("Arial", 14, "bold"))
        titulo.pack(pady=(0, 20))
        
        # Frame para entradas y resultados
        content_frame = ttk.Frame(main_frame)
        content_frame.pack(fill="both", expand=True)
        
        # Frame izquierdo (entradas)
        frame_inputs = ttk.LabelFrame(content_frame, text="üì• Datos de Entrada", padding="10")
        frame_inputs.pack(side="left", fill="y", padx=(0, 10))
        
        # Campos de entrada
        self.entries_experto = {}
        campos = [
            ("ingresos", "üëâ Ingresos mensuales (USD):"),
            ("ahorro", "üëâ Ahorro actual (USD):"),
            ("gastos", "üëâ Gastos mensuales (USD):"),
            ("deudas", "üëâ Deudas actuales (USD):"),
            ("ocio", "üëâ Gasto en ocio (USD):")
        ]
        
        for i, (key, label) in enumerate(campos):
            ttk.Label(frame_inputs, text=label).grid(row=i, column=0, sticky="w", pady=5)
            entry = ttk.Entry(frame_inputs, width=20)
            entry.grid(row=i, column=1, pady=5, padx=(10, 0))
            self.entries_experto[key] = entry
        
        # Bot√≥n de consulta
        btn_consultar = ttk.Button(frame_inputs, text="üîç Consultar Sistema Experto", 
                                  command=self._consultar_experto, style="Accent.TButton")
        btn_consultar.grid(row=len(campos), column=0, columnspan=2, pady=20)
        
        # Frame derecho (resultados)
        frame_output = ttk.LabelFrame(content_frame, text="üìä Recomendaciones del Sistema Experto", padding="10")
        frame_output.pack(side="right", fill="both", expand=True)
        
        # Texto con scroll
        text_frame = ttk.Frame(frame_output)
        text_frame.pack(fill="both", expand=True)
        
        self.text_resultado_experto = tk.Text(text_frame, wrap="word", font=("Consolas", 10))
        scrollbar = ttk.Scrollbar(text_frame, orient="vertical", command=self.text_resultado_experto.yview)
        self.text_resultado_experto.configure(yscrollcommand=scrollbar.set)
        
        self.text_resultado_experto.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Bot√≥n para mostrar estado del sistema
        btn_estado = ttk.Button(frame_output, text="üìã Mostrar Estado del Sistema", 
                               command=self._mostrar_estado_sistema)
        btn_estado.pack(pady=10)
    
    def _crear_tab_difuso(self):
        """Crea la pesta√±a del sistema difuso"""
        # Frame principal
        main_frame = ttk.Frame(self.tab_difuso)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # T√≠tulo
        titulo = ttk.Label(main_frame, text="üåä SISTEMA DIFUSO FINANCIERO", 
                          font=("Arial", 14, "bold"))
        titulo.pack(pady=(0, 20))
        
        # Frame para entradas y resultados
        content_frame = ttk.Frame(main_frame)
        content_frame.pack(fill="both", expand=True)
        
        # Frame izquierdo (entradas)
        frame_inputs = ttk.LabelFrame(content_frame, text="üì• Variables de Entrada", padding="10")
        frame_inputs.pack(side="left", fill="y", padx=(0, 10))
        
        # Campo ahorro mensual
        ttk.Label(frame_inputs, text="üí∞ Ahorro mensual (0-1000 USD):").pack(anchor="w", pady=5)
        self.entry_ahorro = ttk.Entry(frame_inputs, width=20)
        self.entry_ahorro.pack(pady=5)
        self.entry_ahorro.insert(0, "700")  # Valor por defecto
        
        # Campo riesgo de inversi√≥n
        ttk.Label(frame_inputs, text="‚ö†Ô∏è Riesgo de inversi√≥n (0-10):").pack(anchor="w", pady=5)
        self.entry_riesgo = ttk.Entry(frame_inputs, width=20)
        self.entry_riesgo.pack(pady=5)
        self.entry_riesgo.insert(0, "3")  # Valor por defecto
        
        # Botones de evaluaci√≥n
        btn_frame = ttk.Frame(frame_inputs)
        btn_frame.pack(pady=20)
        
        btn_mamdani = ttk.Button(btn_frame, text="üåä Evaluar", 
                                command=self._evaluar_mamdani, style="Accent.TButton")
        btn_mamdani.pack(pady=5)
        
        # btn_tsk = ttk.Button(btn_frame, text="‚ö° Evaluar TSK", 
        #                     command=self._evaluar_tsk, style="Accent.TButton")
        # btn_tsk.pack(pady=5)
        
        # btn_ambos = ttk.Button(btn_frame, text="üîÑ Evaluar Ambos", 
        #                       command=self._evaluar_ambos, style="Accent.TButton")
        # btn_ambos.pack(pady=5)
        
        # Bot√≥n para visualizar conjuntos difusos
        btn_visualizar = ttk.Button(frame_inputs, text="üìä Ver Conjuntos Difusos", 
                                   command=self._visualizar_conjuntos)
        btn_visualizar.pack(pady=10)
        
        # Frame derecho (resultados)
        frame_output = ttk.LabelFrame(content_frame, text="üìà Resultados del Sistema Difuso", padding="10")
        frame_output.pack(side="right", fill="both", expand=True)
        
        # Texto con scroll
        text_frame = ttk.Frame(frame_output)
        text_frame.pack(fill="both", expand=True)
        
        self.text_resultado_difuso = tk.Text(text_frame, wrap="word", font=("Consolas", 10))
        scrollbar = ttk.Scrollbar(text_frame, orient="vertical", command=self.text_resultado_difuso.yview)
        self.text_resultado_difuso.configure(yscrollcommand=scrollbar.set)
        
        self.text_resultado_difuso.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Mostrar informaci√≥n del sistema difuso
        info_text = """
üåä SISTEMA DIFUSO FINANCIERO

üì• Variables de Entrada:
‚Ä¢ Ahorro mensual: 0-1000 USD (conjuntos triangulares)
‚Ä¢ Riesgo de inversi√≥n: 0-10 (conjuntos gaussianos)

üì§ Variable de Salida:
‚Ä¢ Nivel de inversi√≥n: 0-50% (conjuntos triangulares)

üß† Reglas de Inferencia:
‚Ä¢ R1: Ahorro bajo ‚à® Riesgo alto ‚Üí Inversi√≥n conservadora
‚Ä¢ R2: Ahorro medio ‚àß Riesgo moderado ‚Üí Inversi√≥n moderada
‚Ä¢ R3: Ahorro alto ‚àß Riesgo bajo ‚Üí Inversi√≥n agresiva
‚Ä¢ R4: Si ahorro es medio ‚àß riesgo es bajo ‚Üí inversi√≥n es moderada
‚Ä¢ R5: Si ahorro es alto ‚àß riesgo es moderado ‚Üí inversi√≥n es agresiva

‚öôÔ∏è M√©todos de Inferencia:
‚Ä¢ Mamdani con defuzzificaci√≥n por centroide
‚Ä¢ TSK con singletones y media de pesos
        """
        
        self.text_resultado_difuso.insert(tk.END, info_text)
        self.text_resultado_difuso.config(state="disabled")
    
    def _crear_tab_info(self):
        """Crea la pesta√±a de informaci√≥n del sistema"""
        # Frame principal con scroll
        main_frame = ttk.Frame(self.tab_info)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # T√≠tulo
        titulo = ttk.Label(main_frame, text="‚ÑπÔ∏è INFORMACI√ìN DEL SISTEMA FINANCIERO INTELIGENTE", 
                          font=("Arial", 14, "bold"))
        titulo.pack(pady=(0, 20))
        
        # Texto con scroll
        text_frame = ttk.Frame(main_frame)
        text_frame.pack(fill="both", expand=True)
        
        text_info = tk.Text(text_frame, wrap="word", font=("Consolas", 10))
        scrollbar = ttk.Scrollbar(text_frame, orient="vertical", command=text_info.yview)
        text_info.configure(yscrollcommand=scrollbar.set)
        
        text_info.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Informaci√≥n del sistema
        info_text = """
üí∞ SISTEMA FINANCIERO INTELIGENTE
================================

Este sistema integra dos enfoques de inteligencia artificial para 
proporcionar recomendaciones financieras personalizadas:

üß† SISTEMA EXPERTO CLIPS (Pesta√±a 1)
====================================
‚Ä¢ Basado en reglas l√≥gicas y hechos
‚Ä¢ Utiliza el motor de inferencia CLIPS
‚Ä¢ Analiza m√∫ltiples variables financieras
‚Ä¢ Proporciona recomendaciones basadas en reglas predefinidas

üåä SISTEMA DIFUSO (Pesta√±a 2)
==============================
‚Ä¢ Basado en l√≥gica difusa (fuzzy logic)
‚Ä¢ Utiliza scikit-fuzzy para inferencia
‚Ä¢ Maneja incertidumbre y grados de pertenencia
‚Ä¢ Implementa m√©todos Mamdani y TSK

üìä VARIABLES DEL SISTEMA DIFUSO
===============================

Entradas:
‚Ä¢ Ahorro mensual: 0-1000 USD
  - Bajo: (0, 0, 400) - Triangular
  - Medio: (200, 500, 800) - Triangular  
  - Alto: (600, 1000, 1000) - Triangular

‚Ä¢ Riesgo de inversi√≥n: 0-10
  - Bajo: Œº=0, œÉ=1.5 - Gaussiano
  - Moderado: Œº=5, œÉ=1.5 - Gaussiano
  - Alto: Œº=10, œÉ=1.5 - Gaussiano

Salida:
‚Ä¢ Nivel de inversi√≥n: 0-50%
  - Conservadora: (0, 10, 20) - Triangular
  - Moderada: (15, 25, 35) - Triangular
  - Agresiva: (30, 40, 50) - Triangular

üß† REGLAS DE INFERENCIA DIFUSA
==============================

R1: Si ahorro es bajo ‚à® riesgo es alto ‚Üí inversi√≥n es conservadora
R2: Si ahorro es medio ‚àß riesgo es moderado ‚Üí inversi√≥n es moderada
R3: Si ahorro es alto ‚àß riesgo es bajo ‚Üí inversi√≥n es agresiva
R4: Si ahorro es medio ‚àß riesgo es bajo ‚Üí inversi√≥n es moderada
R5: Si ahorro es alto ‚àß riesgo es moderado ‚Üí inversi√≥n es agresiva

‚öôÔ∏è M√âTODOS DE INFERENCIA
=========================

MAMDANI:
‚Ä¢ Usa conjuntos difusos para la salida
‚Ä¢ Defuzzificaci√≥n por centroide
‚Ä¢ Resultado m√°s suave y continuo

TSK (Takagi-Sugeno-Kang):
‚Ä¢ Usa singletones (valores fijos)
‚Ä¢ Agregaci√≥n por media de pesos
‚Ä¢ Resultado m√°s directo y computacionalmente eficiente

üéØ CASOS DE USO
===============

‚Ä¢ Planificaci√≥n financiera personal
‚Ä¢ Evaluaci√≥n de perfiles de riesgo
‚Ä¢ Recomendaciones de inversi√≥n
‚Ä¢ An√°lisis de capacidad de ahorro
‚Ä¢ Educaci√≥n financiera

üìö TECNOLOG√çAS UTILIZADAS
==========================

‚Ä¢ Python 3.8+
‚Ä¢ CLIPS (motor de inferencia)
‚Ä¢ scikit-fuzzy (l√≥gica difusa)
‚Ä¢ tkinter (interfaz gr√°fica)
‚Ä¢ numpy (c√°lculos num√©ricos)
‚Ä¢ matplotlib (visualizaci√≥n)

üîß INSTALACI√ìN Y USO
====================

1. Instalar dependencias: pip install -r requirements.txt
2. Ejecutar: python main.py
3. Usar pesta√±as para alternar entre sistemas
4. Ingresar datos y evaluar resultados

üìñ DOCUMENTACI√ìN
================

‚Ä¢ Cada funci√≥n incluye documentaci√≥n detallada
‚Ä¢ Comentarios explicativos en el c√≥digo
‚Ä¢ Ejemplos de uso incluidos
‚Ä¢ Visualizaci√≥n de conjuntos difusos disponible
        """
        
        text_info.insert(tk.END, info_text)
        text_info.config(state="disabled")
    
    def _consultar_experto(self):
        """Ejecuta la consulta del sistema experto CLIPS"""
        try:
            # Obtener valores de los campos
            valores = {}
            for key, entry in self.entries_experto.items():
                valor = float(entry.get())
                valores[key] = valor
            
            # Insertar hechos en el sistema experto
            self.sistema_experto.insertar_hechos(**valores)
            
            # Ejecutar inferencia
            self.sistema_experto.ejecutar_inferencia()
            
            # Obtener y mostrar resultado
            resultado = self.sistema_experto.obtener_resultado()
            
            # Mostrar en el cuadro de texto
            self.text_resultado_experto.config(state="normal")
            self.text_resultado_experto.delete("1.0", tk.END)
            self.text_resultado_experto.insert(tk.END, resultado)
            self.text_resultado_experto.config(state="disabled")
            
        except ValueError:
            messagebox.showerror("Error", "‚ùå Error: Ingresa solo n√∫meros v√°lidos.")
        except Exception as e:
            messagebox.showerror("Error", f"‚ùå Error: {str(e)}")
    
    def _evaluar_mamdani(self):
        """Eval√∫a el sistema difuso usando el m√©todo Mamdani"""
        try:
            ahorro = float(self.entry_ahorro.get())
            riesgo = float(self.entry_riesgo.get())
            
            resultado = self.sistema_difuso.evaluar_mamdani(ahorro, riesgo)
            
            if 'error' in resultado:
                messagebox.showerror("Error", resultado['error'])
                return
            
            # Mostrar resultado
            self.text_resultado_difuso.config(state="normal")
            self.text_resultado_difuso.delete("1.0", tk.END)
            
            resultado_texto = f"""
üåä RESULTADO M√âTODO DIFUSO
============================

üì• Entradas:
‚Ä¢ Ahorro mensual: {resultado['ahorro_entrada']} USD
‚Ä¢ Riesgo de inversi√≥n: {resultado['riesgo_entrada']}

üì§ Resultado:
‚Ä¢ Nivel de inversi√≥n: {resultado['nivel_inversion']}%
‚Ä¢ Etiqueta ling√º√≠stica: {resultado['etiqueta']}
‚Ä¢ M√©todo: {resultado['metodo']}

üí° Interpretaci√≥n:
El sistema recomienda una estrategia de inversi√≥n {resultado['etiqueta'].lower()}
con un nivel del {resultado['nivel_inversion']}% de los ingresos.
            """
            
            self.text_resultado_difuso.insert(tk.END, resultado_texto)
            self.text_resultado_difuso.config(state="disabled")
            
        except ValueError:
            messagebox.showerror("Error", "‚ùå Error: Ingresa solo n√∫meros v√°lidos.")
        except Exception as e:
            messagebox.showerror("Error", f"‚ùå Error: {str(e)}")
    
    def _evaluar_tsk(self):
        """Eval√∫a el sistema difuso usando el m√©todo TSK"""
        try:
            ahorro = float(self.entry_ahorro.get())
            riesgo = float(self.entry_riesgo.get())
            
            resultado = self.sistema_difuso.evaluar_tsk(ahorro, riesgo)
            
            if 'error' in resultado:
                messagebox.showerror("Error", resultado['error'])
                return
            
            # Mostrar resultado
            self.text_resultado_difuso.config(state="normal")
            self.text_resultado_difuso.delete("1.0", tk.END)
            
            resultado_texto = f"""
‚ö° RESULTADO M√âTODO TSK
========================

üì• Entradas:
‚Ä¢ Ahorro mensual: {resultado['ahorro_entrada']} USD
‚Ä¢ Riesgo de inversi√≥n: {resultado['riesgo_entrada']}

üì§ Resultado:
‚Ä¢ Nivel de inversi√≥n: {resultado['nivel_inversion']}%
‚Ä¢ Etiqueta ling√º√≠stica: {resultado['etiqueta']}
‚Ä¢ M√©todo: {resultado['metodo']}

üí° Interpretaci√≥n:
El sistema recomienda una estrategia de inversi√≥n {resultado['etiqueta'].lower()}
con un nivel del {resultado['nivel_inversion']}% de los ingresos.
            """
            
            self.text_resultado_difuso.insert(tk.END, resultado_texto)
            self.text_resultado_difuso.config(state="disabled")
            
        except ValueError:
            messagebox.showerror("Error", "‚ùå Error: Ingresa solo n√∫meros v√°lidos.")
        except Exception as e:
            messagebox.showerror("Error", f"‚ùå Error: {str(e)}")
    
    def _evaluar_ambos(self):
        """Eval√∫a el sistema difuso usando ambos m√©todos"""
        try:
            ahorro = float(self.entry_ahorro.get())
            riesgo = float(self.entry_riesgo.get())
            
            resultado = self.sistema_difuso.evaluar_ambos_metodos(ahorro, riesgo)
            
            # Mostrar resultado
            self.text_resultado_difuso.config(state="normal")
            self.text_resultado_difuso.delete("1.0", tk.END)
            
            resultado_texto = f"""
üîÑ COMPARACI√ìN AMBOS M√âTODOS
=============================

üì• Entradas:
‚Ä¢ Ahorro mensual: {resultado['entradas']['ahorro_mensual']} USD
‚Ä¢ Riesgo de inversi√≥n: {resultado['entradas']['riesgo_inversion']}

üì§ Resultados:

üåä MAMDANI:
‚Ä¢ Nivel de inversi√≥n: {resultado['resultados']['mamdani']['nivel_inversion']}%
‚Ä¢ Etiqueta: {resultado['resultados']['mamdani']['etiqueta']}

‚ö° TSK:
‚Ä¢ Nivel de inversi√≥n: {resultado['resultados']['tsk']['nivel_inversion']}%
‚Ä¢ Etiqueta: {resultado['resultados']['tsk']['etiqueta']}

üîç Comparaci√≥n:
‚Ä¢ Diferencia entre m√©todos: {resultado['comparacion']['diferencia']:.2f}%

üí° An√°lisis:
Ambos m√©todos proporcionan recomendaciones similares,
validando la consistencia del sistema difuso.
            """
            
            self.text_resultado_difuso.insert(tk.END, resultado_texto)
            self.text_resultado_difuso.config(state="disabled")
            
        except ValueError:
            messagebox.showerror("Error", "‚ùå Error: Ingresa solo n√∫meros v√°lidos.")
        except Exception as e:
            messagebox.showerror("Error", f"‚ùå Error: {str(e)}")
    
    def _visualizar_conjuntos(self):
        """Visualiza los conjuntos difusos del sistema"""
        try:
            self._evaluar_mamdani()
            self.sistema_difuso.visualizar_conjuntos_difusos()
        except Exception as e:
            messagebox.showerror("Error", f"‚ùå Error al visualizar: {str(e)}")
    
    def _mostrar_estado_sistema(self):
        """Muestra el estado completo del sistema experto"""
        estado = self.sistema_experto.obtener_estado_completo()
        
        # Crear ventana emergente
        ventana_estado = tk.Toplevel(self.root)
        ventana_estado.title("Estado del Sistema Experto CLIPS")
        ventana_estado.geometry("700x500")
        
        # Texto con scroll
        text_estado = tk.Text(ventana_estado, wrap="word", font=("Consolas", 10))
        text_estado.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Mostrar informaci√≥n del estado
        text_estado.insert(tk.END, "üìä ESTADO DEL SISTEMA EXPERTO CLIPS\n")
        text_estado.insert(tk.END, "=" * 50 + "\n\n")
        
        text_estado.insert(tk.END, f"üî¢ Estad√≠sticas:\n")
        text_estado.insert(tk.END, f"  - Reglas disponibles: {estado['reglas_count']}\n")
        text_estado.insert(tk.END, f"  - Hechos activos: {estado['hechos_count']}\n\n")
        
        text_estado.insert(tk.END, f"üìú Reglas del sistema:\n")
        for i, regla in enumerate(estado['reglas'], 1):
            text_estado.insert(tk.END, f"  {i}. {regla}\n")
        
        text_estado.insert(tk.END, f"\nüìå Hechos activos:\n")
        if estado['hechos']:
            for i, hecho in enumerate(estado['hechos'], 1):
                text_estado.insert(tk.END, f"  {i}. {hecho}\n")
        else:
            text_estado.insert(tk.END, "  No hay hechos activos\n")
        
        text_estado.insert(tk.END, f"\nüí¨ √öltimo resultado:\n")
        text_estado.insert(tk.END, f"  {estado['resultado']}")
        
        # Deshabilitar edici√≥n
        text_estado.config(state="disabled")


def main():
    """Funci√≥n principal"""
    root = tk.Tk()
    app = SistemaFinancieroGUI(root)
    root.mainloop()


if __name__ == "__main__":
    main()
